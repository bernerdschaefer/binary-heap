{"note":"Don't delete this file! It's used internally to help with page regeneration.","name":"binary-heap","tagline":"Binary heap for node.js","body":"A coffeescript implementation of a [binary\r\nheap](http://en.wikipedia.org/wiki/Binary_heap) for node.js.\r\n\r\n```javascript\r\nvar {BinaryHeap} = require('binary-heap')\r\nvar heap = new BinaryHeap\r\nheap.push(5, 4, 1, 3, 2)\r\n\r\nheap.pop() // 1\r\nheap.pop() // 2\r\nheap.pop() // 3\r\nheap.pop() // 4\r\nheap.pop() // 5\r\n```\r\n\r\n#### new BinaryHeap()\r\nAllocates a new binary heap with the default comparison function. Items\r\nadded to the heap will be sorted from min-to-max.\r\n\r\n```javascript\r\nvar heap = new BinaryHeap\r\nheap.push(3, 2, 1)\r\nheap.pop() // 1\r\nheap.pop() // 2\r\nheap.pop() // 3\r\n```\r\n\r\n#### new BinaryHeap(compareFn)\r\nAllocates a new binary heap with the provided custom comparison function. The\r\ncomparison function should accept two arguments, and return true or false.\r\n\r\n```javascript\r\nvar heap = new BinaryHeap(function(x, y) { return x > y })\r\nheap.push(1, 2, 3)\r\nheap.pop() // 3\r\nheap.pop() // 2\r\nheap.pop() // 1\r\n```\r\n\r\n#### heap.push(item, [...])\r\nInserts an item into its proper position on the heap. Also accepts\r\nmultiple arguments like Array.push().\r\n\r\n```javascript\r\nvar heap = new BinaryHeap\r\nheap.push(2)\r\nheap.push(1, 3, 4)\r\nheap.pop() // 1\r\nheap.pop() // 2\r\nheap.pop() // 3\r\nheap.pop() // 4\r\n```\r\n\r\n#### heap.pop()\r\nRemoves the next item from the heap and returns it.\r\n\r\n```javascript\r\nvar heap = new BinaryHeap\r\nheap.push(1, 2)\r\nheap.pop() // 1\r\nheap.pop() // 2\r\nheap.pop() // null\r\n```\r\n\r\n#### heap.peek()\r\nReturns the next item from the heap, but doesn't remove it.\r\n\r\n```javascript\r\nvar heap = new BinaryHeap\r\nheap.push(1, 2)\r\nheap.peek() // 1\r\nheap.peek() // 1\r\n```\r\n\r\n#### heap.remove(item)\r\nRemoves the given item from the heap.\r\n\r\n```javascript\r\nvar heap = new BinaryHeap\r\nheap.push(1, 2, 3)\r\nheap.remove(2)\r\nheap.pop() // 1\r\nheap.pop() // 3\r\n```","google":""}